Create New Project-- > Select ASP.NET Core Web App --> Give Project Name --> Give
Project Name-- > Select Latest Version .NET 5.0 frame work and Keep the remaining
settings as it is and click on create.
1. Now we will be creating a model.
Code:
Customer.cs
using System;
using
System.Collections.Generic;using
System.Linq;
using System.Threading.Tasks;
namespace Rest_api_prac.Models
{
public class Customer
{
public int ID { get; set; }
public string Name { get; set;
}
public int Items_Count { get; set;
}public int Bill_Amount {get; set; }

}
}
2. A controller is created and used here
Code:
ShopController.cs
ShopController.cs
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using RESTAPI.Models;
// For more information on enabling Web API for empty projects,
visithttps://go.microsoft.com/fwlink/?LinkID=397860
namespace RESTAPI.Controller
{
[Route("api/[controller]")][ApiController]
public class ShopController : ControllerBase
{
// GET:
api/<ShopController>
[HttpGet]
public IEnumerable<Customer> Get()
{
return new[] { new Customer { ID =101, Name ="Kosem", Items_Count =15,Bill_Amount
=6200 },
new Customer { ID =102, Name ="Ahmet", Items_Count =4, Bill_Amount
=1100 },new Customer { ID =103, Name ="Mehmed", Items_Count =6,Bill_Amount
=2200
},
new Customer { ID =104, Name ="Murat", Items_Count =20, Bill_Amount
=9200 },new Customer { ID =105, Name ="Gervehan", Items_Count =7,Bill_Amount
=2900
}
};}
// GET
api/<ShopController>/5
[HttpGet("{ID}")]
public Customer Get(int ID)
{
return new Customer() { ID = 101, Name = "Kosem", Items_Count = 15, Bill_Amount
= 6200
};
}
// POST
api/<ShopController>
[HttpPost]
public void Post([FromBody] string value)
{
}
// PUT
api/<ShopController>/5

[HttpPut("{id}")]
public void Put(int id, [FromBody] string value)
{
}
// DELETE
api/<ShopController>/5
[HttpDelete("{id}")] public
void Delete(int id)
{
}}
1. We have Startup.cs files which helps in triggering the controllers.
Code:
Startup.cs
using Microsoft.AspNetCore.Builder;using
Microsoft.AspNetCore.Hosting;using
Microsoft.AspNetCore.HttpsPolicy; using
Microsoft.Extensions.Configuration; using
Microsoft.Extensions.DependencyInjection;using
Microsoft.Extensions.Hosting;
using System;
using
System.Collections.Generic;using
System.Linq;
using System.Threading.Tasks;
namespace Rest_api_prac
{
public class Startup
{
public Startup(IConfiguration configuration)
{
Configuration = configuration;
}
public IConfiguration Configuration { get; }
// This method gets called by the runtime. Use this method to add services to thecontainer.public
void
ConfigureServices(IServiceCollection services)
{
services.AddControllers();
}
// This method gets called by the runtime. Use this method to configure the HTTPrequestpipeline.
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
if (env.IsDevelopment())
{
app.UseDeveloperExceptionPage();
}
else
{
app.UseExceptionHandler("/Error");
// The default HSTS value is 30 days. You may want to change this for
productionscenarios, see https://aka.ms/aspnetcore-hsts.
app.UseHsts();
}
app.UseHttpsRedirection
();app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();

app.UseEndpoints(endpoints
=>
{
endpoints.-MapControllers();
});
}
}
}
